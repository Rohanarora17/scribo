{
  "address": "0xb803c330fCEe3bD019e75F247A253Cad348278D8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "PoolJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "PrizeClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "RoundClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entryFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxParticipants",
          "type": "uint256"
        }
      ],
      "name": "RoundCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "RoundStarted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "claimPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "closeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_entryFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxParticipants",
          "type": "uint256"
        }
      ],
      "name": "createRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getRoundInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entryFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxParticipants",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "started",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "finished",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "prizeClaimed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "joinPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextRoundId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "startRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userOpenRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x426adea410a6e3d3017624dca35c808c035a6b3c4ab8d27c77e7b8a55eed8e1f",
  "receipt": {
    "to": null,
    "from": "0xCE54cF5a0dE3843011cF20389C1b6a4AaC442d6A",
    "contractAddress": "0xb803c330fCEe3bD019e75F247A253Cad348278D8",
    "transactionIndex": 8,
    "gasUsed": "1144634",
    "logsBloom": "0x
    "blockHash": "0xebc43974f0a188fdd14e77a20cdd5bcfc7d941754ef27860a1d065350d94ad42",
    "transactionHash": "0x426adea410a6e3d3017624dca35c808c035a6b3c4ab8d27c77e7b8a55eed8e1f",
    "logs": [],
    "blockNumber": 31356573,
    "cumulativeGasUsed": "3023380",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c956154c241af65e395c1361d5039879",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"PoolJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PrizeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"RoundClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxParticipants\",\"type\":\"uint256\"}],\"name\":\"RoundCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"RoundStarted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"claimPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"closeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_entryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxParticipants\",\"type\":\"uint256\"}],\"name\":\"createRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getRoundInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxParticipants\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"started\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"prizeClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"startRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userOpenRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SE2Token.sol\":\"ChartPredictionMultiPoolV1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/SE2Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract ChartPredictionMultiPoolV1 is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    struct Round {\\n        address owner;\\n        IERC20 token;\\n        uint256 entryFee;\\n        uint256 maxParticipants;\\n        bool open;\\n        bool started;\\n        bool finished;\\n        address[] players;\\n        mapping(address => bool) hasJoined;\\n        address winner;\\n        bool prizeClaimed;\\n    }\\n\\n    uint256 public nextRoundId = 1;\\n    mapping(uint256 => Round) private rounds;\\n    mapping(address => uint256) public userOpenRound; // user => open roundId (0 if none)\\n\\n    event RoundCreated(\\n        uint256 indexed roundId,\\n        address indexed creator,\\n        address token,\\n        uint256 entryFee,\\n        uint256 maxParticipants\\n    );\\n    event RoundStarted(uint256 indexed roundId);\\n    event PoolJoined(uint256 indexed roundId, address indexed player);\\n    event RoundClosed(uint256 indexed roundId, address winner);\\n    event PrizeClaimed(uint256 indexed roundId, address winner, uint256 amount, address token);\\n\\n    modifier onlyRoundOwner(uint256 roundId) {\\n        require(rounds[roundId].owner == msg.sender, \\\"Not round owner\\\");\\n        _;\\n    }\\n    modifier roundExists(uint256 roundId) {\\n        require(rounds[roundId].owner != address(0), \\\"Round does not exist\\\");\\n        _;\\n    }\\n\\n    function createRound(\\n        address _token,\\n        uint256 _entryFee,\\n        uint256 _maxParticipants\\n    ) external returns (uint256 roundId) {\\n        require(userOpenRound[msg.sender] == 0, \\\"User already has open round\\\");\\n        require(_token != address(0), \\\"Token required\\\");\\n        require(_entryFee > 0, \\\"Entry fee > 0\\\");\\n        require(_maxParticipants > 1, \\\"At least 2 participants\\\");\\n\\n        roundId = nextRoundId++;\\n        Round storage r = rounds[roundId];\\n        r.owner = msg.sender;\\n        r.token = IERC20(_token);\\n        r.entryFee = _entryFee;\\n        r.maxParticipants = _maxParticipants;\\n        r.open = true;\\n        r.started = false;\\n        r.finished = false;\\n\\n        userOpenRound[msg.sender] = roundId;\\n\\n        emit RoundCreated(roundId, msg.sender, _token, _entryFee, _maxParticipants);\\n    }\\n\\n    function startRound(uint256 roundId) external onlyRoundOwner(roundId) roundExists(roundId) {\\n        Round storage r = rounds[roundId];\\n        require(r.open, \\\"Round not open\\\");\\n        require(!r.started, \\\"Round already started\\\");\\n        require(r.players.length >= 2, \\\"Not enough participants\\\");\\n        r.started = true;\\n        emit RoundStarted(roundId);\\n    }\\n\\n    function joinPool(uint256 roundId) external nonReentrant roundExists(roundId) {\\n        Round storage r = rounds[roundId];\\n        require(r.open && !r.started && !r.finished, \\\"Join phase not open\\\");\\n        require(!r.hasJoined[msg.sender], \\\"Already joined\\\");\\n        require(r.players.length < r.maxParticipants, \\\"Round full\\\");\\n        require(r.token.allowance(msg.sender, address(this)) >= r.entryFee, \\\"Insufficient allowance\\\");\\n        require(r.token.balanceOf(msg.sender) >= r.entryFee, \\\"Insufficient balance\\\");\\n\\n        r.token.safeTransferFrom(msg.sender, address(this), r.entryFee);\\n\\n        r.players.push(msg.sender);\\n        r.hasJoined[msg.sender] = true;\\n        emit PoolJoined(roundId, msg.sender);\\n\\n        // Auto-close pool if full\\n        if (r.players.length == r.maxParticipants) {\\n            r.started = true;\\n            emit RoundStarted(roundId);\\n        }\\n    }\\n\\n    // Only round creator can close the round and declare the winner\\n    function closeRound(uint256 roundId, address winner) external onlyRoundOwner(roundId) roundExists(roundId) {\\n        Round storage r = rounds[roundId];\\n        require(r.started, \\\"Round not started\\\");\\n        require(!r.finished, \\\"Round already finished\\\");\\n        require(winner != address(0), \\\"Winner required\\\");\\n        require(r.hasJoined[winner], \\\"Winner not participant\\\");\\n\\n        r.finished = true;\\n        r.open = false;\\n        r.winner = winner;\\n        userOpenRound[msg.sender] = 0;\\n\\n        emit RoundClosed(roundId, winner);\\n    }\\n\\n    // Winner can claim the total pool\\n    function claimPrize(uint256 roundId) external nonReentrant roundExists(roundId) {\\n        Round storage r = rounds[roundId];\\n        require(r.finished, \\\"Round not finished\\\");\\n        require(r.winner == msg.sender, \\\"Not winner\\\");\\n        require(!r.prizeClaimed, \\\"Already claimed\\\");\\n\\n        uint256 pool = r.players.length * r.entryFee;\\n        r.prizeClaimed = true;\\n        r.token.safeTransfer(msg.sender, pool);\\n\\n        emit PrizeClaimed(roundId, msg.sender, pool, address(r.token));\\n    }\\n\\n    // --- VIEWS ---\\n\\n    function getRoundInfo(uint256 roundId)\\n        external\\n        view\\n        returns (\\n            address owner,\\n            address token,\\n            uint256 entryFee,\\n            uint256 maxParticipants,\\n            bool open,\\n            bool started,\\n            bool finished,\\n            uint256 numPlayers,\\n            address winner,\\n            bool prizeClaimed\\n        )\\n    {\\n        Round storage r = rounds[roundId];\\n        owner = r.owner;\\n        token = address(r.token);\\n        entryFee = r.entryFee;\\n        maxParticipants = r.maxParticipants;\\n        open = r.open;\\n        started = r.started;\\n        finished = r.finished;\\n        numPlayers = r.players.length;\\n        winner = r.winner;\\n        prizeClaimed = r.prizeClaimed;\\n    }\\n\\n    function getPlayers(uint256 roundId) external view returns (address[] memory) {\\n        return rounds[roundId].players;\\n    }\\n}\\n\",\"keccak256\":\"0x68b0d1fd67a6669ce80dff429f6837990191ae631405f68848618f5bc790e3c7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001805534801561001457600080fd5b5060016000556112f0806100296000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806388c3ffb01161006657806388c3ffb0146100fc578063a702eb1b146101d7578063b23b57f8146101ea578063b7eef9ab146101fd578063d70981541461021d57600080fd5b806334e7a19f146100985780634002eda6146100ad578063460e2049146100c95780635fc3d52d146100e9575b600080fd5b6100ab6100a63660046110e0565b610230565b005b6100b660015481565b6040519081526020015b60405180910390f35b6100dc6100d73660046110e0565b6105fa565b6040516100c091906110f9565b6100ab6100f73660046110e0565b610669565b61017961010a3660046110e0565b600090815260026020819052604090912080546001820154928201546003830154600484015460058501546007909501546001600160a01b0394851697968516969395929460ff808416956101008504821695620100009095048216949392831692600160a01b900490911690565b604080516001600160a01b039b8c168152998b1660208b01528901979097526060880195909552921515608087015290151560a0860152151560c085015260e0840152909216610100820152901515610120820152610140016100c0565b6100b66101e5366004611162565b610835565b6100ab6101f8366004611195565b610a31565b6100b661020b3660046111c1565b60036020526000908152604090205481565b6100ab61022b3660046110e0565b610c9e565b610238610e75565b60008181526002602052604090205481906001600160a01b03166102775760405162461bcd60e51b815260040161026e906111dc565b60405180910390fd5b6000828152600260205260409020600481015460ff1680156102a357506004810154610100900460ff16155b80156102ba5750600481015462010000900460ff16155b6102fc5760405162461bcd60e51b81526020600482015260136024820152722537b4b710383430b9b2903737ba1037b832b760691b604482015260640161026e565b33600090815260068201602052604090205460ff161561034f5760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481a9bda5b995960921b604482015260640161026e565b60038101546005820154106103935760405162461bcd60e51b815260206004820152600a602482015269149bdd5b9908199d5b1b60b21b604482015260640161026e565b60028101546001820154604051636eb1769f60e11b81523360048201523060248201526001600160a01b039091169063dd62ed3e90604401602060405180830381865afa1580156103e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040c919061120a565b10156104535760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b604482015260640161026e565b600281015460018201546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156104a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c6919061120a565b101561050b5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640161026e565b6002810154600182015461052e916001600160a01b039091169033903090610e9f565b600581018054600181810183556000928352602080842090920180546001600160a01b03191633908117909155808452600685019092526040808420805460ff191690921790915551909185917f8d028106d3591842bc4c0d66d8c158ebdb5328cf938754a104db7bdff99a5d4c9190a360038101546005820154036105eb5760048101805461ff00191661010017905560405183907f33a701182892fd888ed152ca2ac23771a32e814469b7cd255965471e1af3a65990600090a25b50506105f76001600055565b50565b60008181526002602090815260409182902060050180548351818402810184019094528084526060939283018282801561065d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161063f575b50505050509050919050565b60008181526002602052604090205481906001600160a01b031633146106c35760405162461bcd60e51b815260206004820152600f60248201526e2737ba103937bab7321037bbb732b960891b604482015260640161026e565b60008281526002602052604090205482906001600160a01b03166106f95760405162461bcd60e51b815260040161026e906111dc565b6000838152600260205260409020600481015460ff1661074c5760405162461bcd60e51b815260206004820152600e60248201526d2937bab732103737ba1037b832b760911b604482015260640161026e565b6004810154610100900460ff161561079e5760405162461bcd60e51b8152602060048201526015602482015274149bdd5b9908185b1c9958591e481cdd185c9d1959605a1b604482015260640161026e565b6005810154600211156107f35760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f756768207061727469636970616e7473000000000000000000604482015260640161026e565b60048101805461ff00191661010017905560405184907f33a701182892fd888ed152ca2ac23771a32e814469b7cd255965471e1af3a65990600090a250505050565b33600090815260036020526040812054156108925760405162461bcd60e51b815260206004820152601b60248201527f5573657220616c726561647920686173206f70656e20726f756e640000000000604482015260640161026e565b6001600160a01b0384166108d95760405162461bcd60e51b815260206004820152600e60248201526d151bdad95b881c995c5d5a5c995960921b604482015260640161026e565b600083116109195760405162461bcd60e51b815260206004820152600d60248201526c0456e74727920666565203e203609c1b604482015260640161026e565b600182116109695760405162461bcd60e51b815260206004820152601760248201527f4174206c656173742032207061727469636970616e7473000000000000000000604482015260640161026e565b6001805490600061097983611239565b90915550600081815260026020818152604080842080546001600160a01b0319908116339081178355600180840180546001600160a01b038f169416841790559583018b905560038084018b905560048401805462ffffff191690971790965580875294845294829020869055815194855291840188905283018690529293509083907f55423e0872ba440420be27f40f6543486c23c3fd4f4b8d0ddbac11b6dc81e0d59060600160405180910390a3509392505050565b60008281526002602052604090205482906001600160a01b03163314610a8b5760405162461bcd60e51b815260206004820152600f60248201526e2737ba103937bab7321037bbb732b960891b604482015260640161026e565b60008381526002602052604090205483906001600160a01b0316610ac15760405162461bcd60e51b815260040161026e906111dc565b60008481526002602052604090206004810154610100900460ff16610b1c5760405162461bcd60e51b8152602060048201526011602482015270149bdd5b99081b9bdd081cdd185c9d1959607a1b604482015260640161026e565b600481015462010000900460ff1615610b705760405162461bcd60e51b8152602060048201526016602482015275149bdd5b9908185b1c9958591e48199a5b9a5cda195960521b604482015260640161026e565b6001600160a01b038416610bb85760405162461bcd60e51b815260206004820152600f60248201526e15da5b9b995c881c995c5d5a5c9959608a1b604482015260640161026e565b6001600160a01b038416600090815260068201602052604090205460ff16610c1b5760405162461bcd60e51b815260206004820152601660248201527515da5b9b995c881b9bdd081c185c9d1a58da5c185b9d60521b604482015260640161026e565b60048101805462ff00ff1916620100001790556007810180546001600160a01b0386166001600160a01b0319909116811790915533600090815260036020908152604080832092909255905191825286917f2a0641ef71e80039cddc7522d6459d2caef71d8dd8651c053a2700f2ac176900910160405180910390a25050505050565b610ca6610e75565b60008181526002602052604090205481906001600160a01b0316610cdc5760405162461bcd60e51b815260040161026e906111dc565b6000828152600260205260409020600481015462010000900460ff16610d395760405162461bcd60e51b8152602060048201526012602482015271149bdd5b99081b9bdd08199a5b9a5cda195960721b604482015260640161026e565b60078101546001600160a01b03163314610d825760405162461bcd60e51b815260206004820152600a6024820152692737ba103bb4b73732b960b11b604482015260640161026e565b6007810154600160a01b900460ff1615610dd05760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b604482015260640161026e565b60028101546005820154600091610de691611252565b60078301805460ff60a01b1916600160a01b1790556001830154909150610e17906001600160a01b03163383610f0c565b600182015460408051338152602081018490526001600160a01b039092169082015284907fdb070d38d5c0cec0b4e07e1ed113bca6cae7bf48072980a45dd8922dbf2e56059060600160405180910390a25050506105f76001600055565b600260005403610e9857604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516001600160a01b038481166024830152838116604483015260648201839052610f069186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610f42565b50505050565b6040516001600160a01b03838116602483015260448201839052610f3d91859182169063a9059cbb90606401610ed4565b505050565b6000610f576001600160a01b03841683610fa5565b90508051600014158015610f7c575080806020019051810190610f7a9190611269565b155b15610f3d57604051635274afe760e01b81526001600160a01b038416600482015260240161026e565b6060610fb383836000610fbc565b90505b92915050565b606081471015610fe15760405163cd78605960e01b815230600482015260240161026e565b600080856001600160a01b03168486604051610ffd919061128b565b60006040518083038185875af1925050503d806000811461103a576040519150601f19603f3d011682016040523d82523d6000602084013e61103f565b606091505b509150915061104f86838361105b565b925050505b9392505050565b6060826110705761106b826110b7565b611054565b815115801561108757506001600160a01b0384163b155b156110b057604051639996b31560e01b81526001600160a01b038516600482015260240161026e565b5080611054565b8051156110c75780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000602082840312156110f257600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561113a5783516001600160a01b031683529284019291840191600101611115565b50909695505050505050565b80356001600160a01b038116811461115d57600080fd5b919050565b60008060006060848603121561117757600080fd5b61118084611146565b95602085013595506040909401359392505050565b600080604083850312156111a857600080fd5b823591506111b860208401611146565b90509250929050565b6000602082840312156111d357600080fd5b610fb382611146565b602080825260149082015273149bdd5b9908191bd95cc81b9bdd08195e1a5cdd60621b604082015260600190565b60006020828403121561121c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60006001820161124b5761124b611223565b5060010190565b8082028115828204841417610fb657610fb6611223565b60006020828403121561127b57600080fd5b8151801515811461105457600080fd5b6000825160005b818110156112ac5760208186018101518583015201611292565b50600092019182525091905056fea26469706673582212204daff19219f5b2ed41fc4422618e5e354a40af1e0afc9e35478345278fb05d2664736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806388c3ffb01161006657806388c3ffb0146100fc578063a702eb1b146101d7578063b23b57f8146101ea578063b7eef9ab146101fd578063d70981541461021d57600080fd5b806334e7a19f146100985780634002eda6146100ad578063460e2049146100c95780635fc3d52d146100e9575b600080fd5b6100ab6100a63660046110e0565b610230565b005b6100b660015481565b6040519081526020015b60405180910390f35b6100dc6100d73660046110e0565b6105fa565b6040516100c091906110f9565b6100ab6100f73660046110e0565b610669565b61017961010a3660046110e0565b600090815260026020819052604090912080546001820154928201546003830154600484015460058501546007909501546001600160a01b0394851697968516969395929460ff808416956101008504821695620100009095048216949392831692600160a01b900490911690565b604080516001600160a01b039b8c168152998b1660208b01528901979097526060880195909552921515608087015290151560a0860152151560c085015260e0840152909216610100820152901515610120820152610140016100c0565b6100b66101e5366004611162565b610835565b6100ab6101f8366004611195565b610a31565b6100b661020b3660046111c1565b60036020526000908152604090205481565b6100ab61022b3660046110e0565b610c9e565b610238610e75565b60008181526002602052604090205481906001600160a01b03166102775760405162461bcd60e51b815260040161026e906111dc565b60405180910390fd5b6000828152600260205260409020600481015460ff1680156102a357506004810154610100900460ff16155b80156102ba5750600481015462010000900460ff16155b6102fc5760405162461bcd60e51b81526020600482015260136024820152722537b4b710383430b9b2903737ba1037b832b760691b604482015260640161026e565b33600090815260068201602052604090205460ff161561034f5760405162461bcd60e51b815260206004820152600e60248201526d105b1c9958591e481a9bda5b995960921b604482015260640161026e565b60038101546005820154106103935760405162461bcd60e51b815260206004820152600a602482015269149bdd5b9908199d5b1b60b21b604482015260640161026e565b60028101546001820154604051636eb1769f60e11b81523360048201523060248201526001600160a01b039091169063dd62ed3e90604401602060405180830381865afa1580156103e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040c919061120a565b10156104535760405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b604482015260640161026e565b600281015460018201546040516370a0823160e01b81523360048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156104a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c6919061120a565b101561050b5760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640161026e565b6002810154600182015461052e916001600160a01b039091169033903090610e9f565b600581018054600181810183556000928352602080842090920180546001600160a01b03191633908117909155808452600685019092526040808420805460ff191690921790915551909185917f8d028106d3591842bc4c0d66d8c158ebdb5328cf938754a104db7bdff99a5d4c9190a360038101546005820154036105eb5760048101805461ff00191661010017905560405183907f33a701182892fd888ed152ca2ac23771a32e814469b7cd255965471e1af3a65990600090a25b50506105f76001600055565b50565b60008181526002602090815260409182902060050180548351818402810184019094528084526060939283018282801561065d57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161063f575b50505050509050919050565b60008181526002602052604090205481906001600160a01b031633146106c35760405162461bcd60e51b815260206004820152600f60248201526e2737ba103937bab7321037bbb732b960891b604482015260640161026e565b60008281526002602052604090205482906001600160a01b03166106f95760405162461bcd60e51b815260040161026e906111dc565b6000838152600260205260409020600481015460ff1661074c5760405162461bcd60e51b815260206004820152600e60248201526d2937bab732103737ba1037b832b760911b604482015260640161026e565b6004810154610100900460ff161561079e5760405162461bcd60e51b8152602060048201526015602482015274149bdd5b9908185b1c9958591e481cdd185c9d1959605a1b604482015260640161026e565b6005810154600211156107f35760405162461bcd60e51b815260206004820152601760248201527f4e6f7420656e6f756768207061727469636970616e7473000000000000000000604482015260640161026e565b60048101805461ff00191661010017905560405184907f33a701182892fd888ed152ca2ac23771a32e814469b7cd255965471e1af3a65990600090a250505050565b33600090815260036020526040812054156108925760405162461bcd60e51b815260206004820152601b60248201527f5573657220616c726561647920686173206f70656e20726f756e640000000000604482015260640161026e565b6001600160a01b0384166108d95760405162461bcd60e51b815260206004820152600e60248201526d151bdad95b881c995c5d5a5c995960921b604482015260640161026e565b600083116109195760405162461bcd60e51b815260206004820152600d60248201526c0456e74727920666565203e203609c1b604482015260640161026e565b600182116109695760405162461bcd60e51b815260206004820152601760248201527f4174206c656173742032207061727469636970616e7473000000000000000000604482015260640161026e565b6001805490600061097983611239565b90915550600081815260026020818152604080842080546001600160a01b0319908116339081178355600180840180546001600160a01b038f169416841790559583018b905560038084018b905560048401805462ffffff191690971790965580875294845294829020869055815194855291840188905283018690529293509083907f55423e0872ba440420be27f40f6543486c23c3fd4f4b8d0ddbac11b6dc81e0d59060600160405180910390a3509392505050565b60008281526002602052604090205482906001600160a01b03163314610a8b5760405162461bcd60e51b815260206004820152600f60248201526e2737ba103937bab7321037bbb732b960891b604482015260640161026e565b60008381526002602052604090205483906001600160a01b0316610ac15760405162461bcd60e51b815260040161026e906111dc565b60008481526002602052604090206004810154610100900460ff16610b1c5760405162461bcd60e51b8152602060048201526011602482015270149bdd5b99081b9bdd081cdd185c9d1959607a1b604482015260640161026e565b600481015462010000900460ff1615610b705760405162461bcd60e51b8152602060048201526016602482015275149bdd5b9908185b1c9958591e48199a5b9a5cda195960521b604482015260640161026e565b6001600160a01b038416610bb85760405162461bcd60e51b815260206004820152600f60248201526e15da5b9b995c881c995c5d5a5c9959608a1b604482015260640161026e565b6001600160a01b038416600090815260068201602052604090205460ff16610c1b5760405162461bcd60e51b815260206004820152601660248201527515da5b9b995c881b9bdd081c185c9d1a58da5c185b9d60521b604482015260640161026e565b60048101805462ff00ff1916620100001790556007810180546001600160a01b0386166001600160a01b0319909116811790915533600090815260036020908152604080832092909255905191825286917f2a0641ef71e80039cddc7522d6459d2caef71d8dd8651c053a2700f2ac176900910160405180910390a25050505050565b610ca6610e75565b60008181526002602052604090205481906001600160a01b0316610cdc5760405162461bcd60e51b815260040161026e906111dc565b6000828152600260205260409020600481015462010000900460ff16610d395760405162461bcd60e51b8152602060048201526012602482015271149bdd5b99081b9bdd08199a5b9a5cda195960721b604482015260640161026e565b60078101546001600160a01b03163314610d825760405162461bcd60e51b815260206004820152600a6024820152692737ba103bb4b73732b960b11b604482015260640161026e565b6007810154600160a01b900460ff1615610dd05760405162461bcd60e51b815260206004820152600f60248201526e105b1c9958591e4818db185a5b5959608a1b604482015260640161026e565b60028101546005820154600091610de691611252565b60078301805460ff60a01b1916600160a01b1790556001830154909150610e17906001600160a01b03163383610f0c565b600182015460408051338152602081018490526001600160a01b039092169082015284907fdb070d38d5c0cec0b4e07e1ed113bca6cae7bf48072980a45dd8922dbf2e56059060600160405180910390a25050506105f76001600055565b600260005403610e9857604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6040516001600160a01b038481166024830152838116604483015260648201839052610f069186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610f42565b50505050565b6040516001600160a01b03838116602483015260448201839052610f3d91859182169063a9059cbb90606401610ed4565b505050565b6000610f576001600160a01b03841683610fa5565b90508051600014158015610f7c575080806020019051810190610f7a9190611269565b155b15610f3d57604051635274afe760e01b81526001600160a01b038416600482015260240161026e565b6060610fb383836000610fbc565b90505b92915050565b606081471015610fe15760405163cd78605960e01b815230600482015260240161026e565b600080856001600160a01b03168486604051610ffd919061128b565b60006040518083038185875af1925050503d806000811461103a576040519150601f19603f3d011682016040523d82523d6000602084013e61103f565b606091505b509150915061104f86838361105b565b925050505b9392505050565b6060826110705761106b826110b7565b611054565b815115801561108757506001600160a01b0384163b155b156110b057604051639996b31560e01b81526001600160a01b038516600482015260240161026e565b5080611054565b8051156110c75780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6000602082840312156110f257600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561113a5783516001600160a01b031683529284019291840191600101611115565b50909695505050505050565b80356001600160a01b038116811461115d57600080fd5b919050565b60008060006060848603121561117757600080fd5b61118084611146565b95602085013595506040909401359392505050565b600080604083850312156111a857600080fd5b823591506111b860208401611146565b90509250929050565b6000602082840312156111d357600080fd5b610fb382611146565b602080825260149082015273149bdd5b9908191bd95cc81b9bdd08195e1a5cdd60621b604082015260600190565b60006020828403121561121c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60006001820161124b5761124b611223565b5060010190565b8082028115828204841417610fb657610fb6611223565b60006020828403121561127b57600080fd5b8151801515811461105457600080fd5b6000825160005b818110156112ac5760208186018101518583015201611292565b50600092019182525091905056fea26469706673582212204daff19219f5b2ed41fc4422618e5e354a40af1e0afc9e35478345278fb05d2664736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 667,
        "contract": "contracts/SE2Token.sol:ChartPredictionMultiPoolV1",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 766,
        "contract": "contracts/SE2Token.sol:ChartPredictionMultiPoolV1",
        "label": "nextRoundId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 771,
        "contract": "contracts/SE2Token.sol:ChartPredictionMultiPoolV1",
        "label": "rounds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Round)763_storage)"
      },
      {
        "astId": 775,
        "contract": "contracts/SE2Token.sol:ChartPredictionMultiPoolV1",
        "label": "userOpenRound",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Round)763_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ChartPredictionMultiPoolV1.Round)",
        "numberOfBytes": "32",
        "value": "t_struct(Round)763_storage"
      },
      "t_struct(Round)763_storage": {
        "encoding": "inplace",
        "label": "struct ChartPredictionMultiPoolV1.Round",
        "members": [
          {
            "astId": 738,
            "contract": "contracts/SE2Token.sol:ChartPredictionMultiPoolV1",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 741,
            "contract": "contracts/SE2Token.sol:ChartPredictionMultiPoolV1",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)77"
          },
          {
            "astId": 743,
            "contract": "contracts/SE2Token.sol:ChartPredictionMultiPoolV1",
            "label": "entryFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 745,
            "contract": "contracts/SE2Token.sol:ChartPredictionMultiPoolV1",
            "label": "maxParticipants",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 747,
            "contract": "contracts/SE2Token.sol:ChartPredictionMultiPoolV1",
            "label": "open",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 749,
            "contract": "contracts/SE2Token.sol:ChartPredictionMultiPoolV1",
            "label": "started",
            "offset": 1,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 751,
            "contract": "contracts/SE2Token.sol:ChartPredictionMultiPoolV1",
            "label": "finished",
            "offset": 2,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 754,
            "contract": "contracts/SE2Token.sol:ChartPredictionMultiPoolV1",
            "label": "players",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 758,
            "contract": "contracts/SE2Token.sol:ChartPredictionMultiPoolV1",
            "label": "hasJoined",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 760,
            "contract": "contracts/SE2Token.sol:ChartPredictionMultiPoolV1",
            "label": "winner",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 762,
            "contract": "contracts/SE2Token.sol:ChartPredictionMultiPoolV1",
            "label": "prizeClaimed",
            "offset": 20,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}